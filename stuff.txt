import "./style.css";
import Phaser from "phaser";

const sizes = {
  width: 960,
  height: 640,
};
let last_direction;
let spirit_terrain;


class GameScene extends Phaser.Scene {
  constructor() {
    super("scene-game");
  }

  preload() {
    // Load spritesheet for the protagonist
    this.load.spritesheet('protagonist', '/assets/mainCH.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('enemy', '/assets/waterspirit.png', { frameWidth: 150, frameHeight: 150 });
    
  
    // Load tileset and tilemap
    this.load.tilemapTiledJSON('map', '/assets/maps/worldmap.json');

    this.load.image('tiles', 'assets/maps/terrain_dark.png');
  }

  create() {
    console.log('create method executed');
    this.protagonist = this.physics.add.sprite(200, 550, 'protagonist');
    this.enemy = this.physics.add.sprite(200, 100, 'enemy');
    
    // Set up properties for the water spirit
    this.enemy.speed = 100; // Adjust the speed as needed
    this.protagonist.setDepth(1);
    this.enemy.setDepth(1);
    const map = this.make.tilemap({ key: 'map' });

    //console.log('Tilemap:', map); // Log the tilemap object to inspect its properties

    // Add tilesets for each layer
    const Tileset = map.addTilesetImage('test-tiles', 'tiles');
  
    
    // Create layers from tilemap data
    const groundLayer = map.createLayer('', Tileset, 0, 0); 
    const waterLayer = map.createLayer('water', Tileset, 0, 0); 

    console.log('Street Layer:', streetLayer); // Log the street layer object to check if it's properly created
    console.log('Water Layer:', waterLayer); // Log the street layer object to check if it's properly created
  
    // Adjust the depth of layers as needed
    streetLayer.setDepth(0);
    waterLayer.setDepth(0);
    map.setCollisionBetween(188, 188, true, waterLayer);
    map.setCollisionBetween(0, 0, true, streetLayer);

    //console.log('Tile at enemy:', streetLayer.getTileAtWorldXY(this.enemy.x, this.enemy.y, true)); // Log the tile information

    this.anims.create({
      key: 'enemy_move_street',
      frames: this.anims.generateFrameNumbers('enemy', { start: 3, end: 4 }),
      frameRate: 10,
      repeat: -1 // Loop indefinitely
  });

  this.anims.create({
      key: 'enemy_move_water',
      frames: this.anims.generateFrameNumbers('enemy', { start: 0, end: 1 }), // Assuming frames 2 and 3 are for water animation
      frameRate: 10,
      repeat: -1 // Loop indefinitely
  });
    // Define animations
    this.anims.create({
      key: 'move-up',
      frames: this.anims.generateFrameNumbers('protagonist', { start: 1, end: 2 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: 'idle-up',
      frames: this.anims.generateFrameNumbers('protagonist', { frames: [0] }), // Adjust the frame numbers as needed
      frameRate: 5,
      repeat: -1
    });
    this.anims.create({
      key: 'move-down',
      frames: this.anims.generateFrameNumbers('protagonist', { start: 7, end: 8 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: 'idle-down',
      frames: this.anims.generateFrameNumbers('protagonist', { frames: [6] }), // Adjust the frame numbers as needed
      frameRate: 5,
      repeat: -1
    });
    this.anims.create({
      key: 'move-left',
      frames: this.anims.generateFrameNumbers('protagonist', { start: 10, end: 11 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: 'idle-left',
      frames: this.anims.generateFrameNumbers('protagonist', { frames: [11] }), // Adjust the frame numbers as needed
      frameRate: 5,
      repeat: -1
    });
    this.anims.create({
      key: 'move-right',
      frames: this.anims.generateFrameNumbers('protagonist', { start: 4, end: 5 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: 'idle-right',
      frames: this.anims.generateFrameNumbers('protagonist', { frames: [3] }), // Adjust the frame numbers as needed
      frameRate: 5,
      repeat: -1
    });
    //console.log(this.streetLayer.getTileAtWorldXY(this.enemy.x, this.enemy.y, true))
    // Set up keyboard input
    this.cursors = this.input.keyboard.createCursorKeys();
    // Enable physics for the protagonist
    this.physics.world.setBounds(0, 0, map.widthInPixels, map.heightInPixels);
    this.physics.add.collider(this.protagonist, streetLayer);
    this.physics.add.collider(this.enemy, streetLayer);
    //this.physics.add.collider(this.enemy, waterLayer);
 
 // Play the appropriate animation based on the collision result
 if (spirit_terrain == "street") {
     this.enemy.play('enemy_move_street');
     console.log("spirit on street");
  
 } else {
     this.enemy.play('enemy_move_water');
     console.log("spirit on water");
 }

 this.streetLayer = streetLayer;
 this.waterLayer = waterLayer;
 
  }

  update() {
    // Reset velocity
    this.protagonist.setVelocity(0);
   
    // Handle keyboard input
    if (this.cursors.up.isDown) {
      this.protagonist.setVelocityY(-160);
      this.protagonist.anims.play('move-up', true)
      last_direction = "up";
    } else if (this.cursors.down.isDown) {
      this.protagonist.setVelocityY(160);
      this.protagonist.anims.play('move-down', true)
      last_direction = "down";
    } else if (this.cursors.left.isDown) {
      this.protagonist.setVelocityX(-160);
      this.protagonist.anims.play('move-left', true)
      last_direction = "left";
    } else if (this.cursors.right.isDown) {
      this.protagonist.setVelocityX(160);
      this.protagonist.anims.play('move-right', true)
      last_direction = "right";
    } else {
      // If no movement keys are pressed, play the idle animation for the current direction
      if (last_direction == "up") {
        this.protagonist.anims.play('idle-up', true);
      } else if (last_direction == "down") {
        this.protagonist.anims.play('idle-down', true);
      } else if (last_direction == "left") {
        this.protagonist.anims.play('idle-left', true);
      } else if (last_direction == "right") {
        this.protagonist.anims.play('idle-right', true);
      } else {
        // If no movement keys are pressed and velocity is zero, play the default idle animation
        this.protagonist.anims.play('idle-up', true);
      }
    }
    this.physics.moveToObject(this.enemy, this.protagonist, this.enemy.speed);
     // Play the appropriate animation based on the collision result
 if (spirit_terrain == "street") {
  this.enemy.play('enemy_move_street', true);
  console.log("spirit on street");

} else {
  this.enemy.play('enemy_move_water', true);
  console.log("spirit on water", true);
}
this.updateInfo();

  }
  updateInfo() {
 
        const tileIndex = this.streetLayer.getTileAtWorldXY(this.enemy.x, this.enemy.y, true).index;
        if (tileIndex === 485 || tileIndex === 702 || tileIndex === 549 || tileIndex === 583 || tileIndex === 670 || tileIndex === 734 || tileIndex === 735) {
          spirit_terrain = "street"
        } else spirit_terrain = "water"
    
    
    };
}





const config = {
  type: Phaser.WEBGL,
  width: sizes.width,
  height: sizes.height,
  canvas: gameCanvas,
  physics: {
    default: "arcade",
    arcade: {
      debug: true, // Set to true to enable debugging (displays collision bodies)
    },
  },
  scene: [GameScene],
};

const game = new Phaser.Game(config);